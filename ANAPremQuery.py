# Generated by Selenium IDE
import chromedriver_binary
import os,datetime,calendar

import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

# Append a 0 for single digit day/month
def zstr(day_or_month):
    return str(day_or_month) if day_or_month>=10 else '0'+str(day_or_month) 

#########################
class ANAPremQuery():

  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()

  ##########
  def query_for_month(self, origin, dest, year, month, day=None):

    self.driver.get("https://www.ana.co.jp/ja/jp/book-plan/fare/domestic/premiumclass/")
    self.driver.set_window_size(1792, 1017)
    self.driver.execute_script("window.scrollTo(0,109)")

    # Return -> Oneway
    self.driver.find_element(By.ID, "secondmodule_ticket02").click()

    # Delete the preset origin form
    self.driver.find_element(By.CSS_SELECTOR, "#module001 .m_departureAirport .d_clearButton > img").click() 

    # Origin
    self.driver.find_element(By.ID, "m_secondmodule_depApoText_01").click()
    self.driver.find_element(By.ID, "m_secondmodule_depApoText_01").send_keys(origin)
    self.driver.find_element(By.ID, "m_secondmodule_depApoText_01").send_keys(Keys.ENTER)

    # Destination
    self.driver.find_element(By.ID, "m_secondmodule_arrApoText_01").click()
    self.driver.find_element(By.ID, "m_secondmodule_arrApoText_01").send_keys(dest)
    self.driver.find_element(By.ID, "m_secondmodule_arrApoText_01").send_keys(Keys.ENTER)

    # Open the calendar
    self.driver.find_element(By.ID, "calTextId_Second_01").click()

    # Scroll until finding the month 
    calendar_name="#cal_Second_01_month_"+str(year)+zstr(month)
    while len(self.driver.find_elements(By.CSS_SELECTOR, calendar_name))==0 :
        self.driver.find_element(By.LINK_TEXT, "次の3ヶ月").click()

    # Click on the desired date on the calendar grid
    #   Monthly dump mode -> 1st day of the month
    #   Note: 
    day_calendar = 1 if day==None else day
    weekNum = datetime.date(year, month, day).weekday()   #        Mon=0, ...       Sun=6
    columnNum = (weekNum+1) % 7 + 1                        # Sun=1, Mon=2, ... Sat=7 
    rawNum = 1 if day==None else int((day-1)/7)+1
    self.driver.find_element(By.CSS_SELECTOR, calendar_name+" tr:nth-child("+int(rawNum)+") > td:nth-child("+str(columnNum)+")").click()

    # Start the inital query
    self.driver.find_element(By.NAME, "submitButtonName_Second").click()

#    print('aaa1')
#    print(self.driver.find_element(By.NAME,"selectedDateValue").get_property('attributes')[0])
#    print('aaa2')

    # Save
    timeStamp = str(year)+zstr(month)+zstr(day) if day!=None else str(year)+zstr(month)+"01"
    os.makedirs('output/', exist_ok=True)
    with open('output/rawquery_'+origin+'_'+dest+'_'+timeStamp+'.html', 'w') as f:
        f.write(self.driver.page_source)

    if day==None :
        # Save and go over the rest of the month
        _,nDays = calendar.monthrange(year, month)
        for day in range(1,nDays+1):

            # Move on to the next day
            if day > 1:
                self.driver.find_element(By.CSS_SELECTOR, "#nextDayButton > .jsRollOver").click()
                element = self.driver.find_element(By.CSS_SELECTOR, "#nextDayButton > .jsRollOver")
                actions = ActionChains(self.driver)
                actions.move_to_element(element).perform()
            else : 
                # The buttom doesn't work at the first push(?)
                self.driver.find_element(By.CSS_SELECTOR, "#nextDayButton > .jsRollOver").click()



######################################
query = ANAPremQuery()
query.setup_method(method=None)
#query.query_for_month(origin='haneda', dest='naha', year=2022, month=1) 
#query.query_for_month(origin='haneda', dest='naha', year=2022, month=2) 
query.query_for_month(origin='haneda', dest='naha', year=2022, month=3, day=17) 


